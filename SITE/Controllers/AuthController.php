<?php
namespace Controllers;

use Models\User;
use Core\Csrf;
use Core\Mailer;

final class AuthController
{
    // Liste officielle des sp√©cialit√©s (correspond √† la contrainte CHECK de ta BDD)
    private const SPECIALITES = [
        'Addictologie', 'Algologie', 'Allergologie', 'Anesth√©sie-R√©animation',
        'Canc√©rologie', 'Cardio-vasculaire HTA', 'Chirurgie', 'Dermatologie',
        'Diab√©tologie-Endocrinologie', 'G√©n√©tique', 'G√©riatrie',
        'Gyn√©cologie-Obst√©trique', 'H√©matologie', 'H√©pato-gastro-ent√©rologie',
        'Imagerie m√©dicale', 'Immunologie', 'Infectiologie', 'M√©decine du sport',
        'M√©decine du travail', 'M√©decine g√©n√©rale', 'M√©decine l√©gale',
        'M√©decine physique et de r√©adaptation', 'N√©phrologie', 'Neurologie',
        'Nutrition', 'Ophtalmologie', 'ORL', 'P√©diatrie', 'Pneumologie',
        'Psychiatrie', 'Radiologie', 'Rhumatologie', 'Sexologie',
        'Toxicologie', 'Urologie'
    ];

    // ============================================================
    // INSCRIPTION
    // ============================================================

    public function showRegister(): void
    {
        $errors = [];
        $success = '';
        $old = $this->getEmptyFormData();
        require __DIR__ . '/../Views/auth/register.php';
    }

    public function register(): void
    {
        $errors = [];
        $success = '';
        $old = $this->getFormData();
        $password = (string)($_POST['password'] ?? '');
        $password_confirm = (string)($_POST['password_confirm'] ?? '');
        $csrf = (string)($_POST['csrf_token'] ?? '');

        // Validation
        $errors = $this->validateRegistration($old, $password, $password_confirm, $csrf);

        // Cr√©ation du compte
        if (empty($errors)) {
            $hash = password_hash($password, PASSWORD_DEFAULT);

            try {
                $token = User::createWithActivation(
                    $old['prenom'],
                    $old['nom'],
                    $old['email'],
                    $hash,
                    $old['sexe'],
                    $old['specialite']
                );

                // Dans la m√©thode register(), remplace la partie envoi email par :

                if (!$token) {
                    $errors[] = 'Erreur lors de la cr√©ation du compte. Veuillez r√©essayer.';
                } else {
                    // ‚úÖ MODE DEV : Active directement le compte en local
                    $isLocal = ($_SERVER['SERVER_NAME'] === 'localhost' || $_SERVER['SERVER_ADDR'] === '127.0.0.1');

                    if ($isLocal) {
                        // Active directement sans email
                        if (User::activateAccount($token)) {
                            $success = 'Compte cr√©√© et activ√© avec succ√®s ! üéâ<br><br>'
                                . '<strong>Mode d√©veloppement :</strong> Votre compte a √©t√© activ√© automatiquement.<br>'
                                . 'Vous pouvez maintenant vous connecter.';
                            $old = $this->getEmptyFormData();
                        } else {
                            $errors[] = 'Erreur lors de l\'activation automatique.';
                        }
                    } else {
                        // Mode production : envoi email normal
                        $activationUrl = $this->buildActivationUrl($token);
                        $mailSent = Mailer::sendActivationEmail($old['email'], $old['prenom'], $activationUrl);

                        if ($mailSent) {
                            $success = 'Compte cr√©√© avec succ√®s ! üéâ<br><br>'
                                . 'Un email d\'activation a √©t√© envoy√© √† <strong>' . htmlspecialchars($old['email']) . '</strong>.<br>'
                                . 'Veuillez v√©rifier votre bo√Æte de r√©ception (et vos spams).<br><br>'
                                . '<em>Le lien est valable 24 heures.</em>';
                            $old = $this->getEmptyFormData();
                        } else {
                            User::deleteUnactivatedAccount($old['email']);
                            $errors[] = 'Impossible d\'envoyer l\'email d\'activation.';
                            error_log('[REGISTER] Mail non envoy√© pour ' . $old['email']);
                        }
                    }
                }
            } catch (\Throwable $e) {
                $errors[] = 'Erreur syst√®me. Veuillez r√©essayer plus tard.';
                error_log('Erreur inscription : ' . $e->getMessage());
            }
        }

        require __DIR__ . '/../Views/auth/register.php';
    }

    // ============================================================
    // CONNEXION
    // ============================================================

    public function showLogin(): void
    {
        $errors = [];
        $success = isset($_GET['reset']) && $_GET['reset'] === '1'
            ? 'Votre mot de passe a √©t√© r√©initialis√©. Vous pouvez vous connecter.'
            : '';
        $old = ['email' => ''];
        require __DIR__ . '/../Views/auth/login.php';
    }

    public function login(): void
    {
        if (session_status() !== PHP_SESSION_ACTIVE) {
            session_start();
        }

        $errors = [];
        $email = strtolower(trim((string)($_POST['email'] ?? '')));
        $password = (string)($_POST['password'] ?? '');
        $csrf = (string)($_POST['csrf_token'] ?? '');

        // ‚úÖ AJOUT : Rate limiting
        if ($this->isRateLimited()) {
            $errors[] = 'Trop de tentatives de connexion. Veuillez attendre 15 minutes.';
            $old = ['email' => $email];
            require __DIR__ . '/../Views/auth/login.php';
            return;
        }

        // Validation CSRF
        if (!Csrf::validate($csrf)) {
            $errors[] = 'Session expir√©e ou jeton CSRF invalide.';
        }

        if (empty($errors)) {
            $medecin = User::findByEmail($email);

            if (!$medecin || !password_verify($password, $medecin['mdp'])) {
                $errors[] = 'Identifiants invalides.';
                $this->recordFailedAttempt(); // ‚úÖ Enregistre la tentative √©chou√©e
            } elseif (!$medecin['compte_actif']) {
                $errors[] = 'Votre compte n\'est pas encore activ√©. '
                    . 'Veuillez v√©rifier vos emails et cliquer sur le lien d\'activation.';
            } else {
                // Connexion r√©ussie
                $this->loginUser($medecin);
                return;
            }
        }

        $old = ['email' => $email];
        require __DIR__ . '/../Views/auth/login.php';
    }

    // ============================================================
    // D√âCONNEXION
    // ============================================================

    public function logout(): void
    {
        if (session_status() !== PHP_SESSION_ACTIVE) {
            session_start();
        }

        $_SESSION = [];

        if (ini_get('session.use_cookies')) {
            $p = session_get_cookie_params();
            setcookie(session_name(), '', time() - 42000, $p['path'], $p['domain'], $p['secure'], $p['httponly']);
        }

        session_destroy();

        if (headers_sent()) {
            die('Erreur: headers d√©j√† envoy√©s');
        }

        header('Location: /');
        exit;
    }

    // ============================================================
    // M√âTHODES PRIV√âES
    // ============================================================

    /**
     * Retourne un tableau vide pour le formulaire
     */
    private function getEmptyFormData(): array
    {
        return ['prenom' => '', 'nom' => '', 'email' => '', 'sexe' => '', 'specialite' => ''];
    }

    /**
     * R√©cup√®re et nettoie les donn√©es du formulaire
     */
    private function getFormData(): array
    {
        return [
            'prenom'     => trim((string)($_POST['prenom'] ?? '')),
            'nom'        => trim((string)($_POST['nom'] ?? '')),
            'email'      => trim((string)($_POST['email'] ?? '')),
            'sexe'       => trim((string)($_POST['sexe'] ?? '')),
            'specialite' => trim((string)($_POST['specialite'] ?? '')),
        ];
    }

    /**
     * Valide toutes les donn√©es d'inscription
     */
    private function validateRegistration(array $old, string $password, string $confirm, string $csrf): array
    {
        $errors = [];

        // CSRF
        if (!Csrf::validate($csrf)) {
            $errors[] = 'Session expir√©e ou jeton CSRF invalide.';
        }

        // Champs obligatoires
        if (empty($old['prenom']) || empty($old['nom'])) {
            $errors[] = 'Le pr√©nom et le nom sont obligatoires.';
        }

        // Sexe
        if (!in_array($old['sexe'], ['M', 'F'])) {
            $errors[] = 'Veuillez s√©lectionner votre sexe (M ou F).';
        }

        // ‚úÖ CORRECTION : Validation stricte de la sp√©cialit√©
        if (!in_array($old['specialite'], self::SPECIALITES)) {
            $errors[] = 'Veuillez s√©lectionner une sp√©cialit√© valide.';
        }

        // Longueur
        if (strlen($old['prenom']) > 50 || strlen($old['nom']) > 100) {
            $errors[] = 'Le pr√©nom (max 50) et le nom (max 100) sont trop longs.';
        }

        if (strlen($old['email']) > 150) {
            $errors[] = 'L\'adresse email est trop longue (max 150 caract√®res).';
        }

        // Email
        if (!filter_var($old['email'], FILTER_VALIDATE_EMAIL)) {
            $errors[] = 'Adresse email invalide.';
        }

        // Mot de passe
        if ($password !== $confirm) {
            $errors[] = 'Les mots de passe ne correspondent pas.';
        }

        if (!$this->isPasswordStrong($password)) {
            $errors[] = 'Le mot de passe doit contenir au moins 12 caract√®res, avec majuscules, minuscules, chiffres et un caract√®re sp√©cial.';
        }

        // Email existant
        if (empty($errors) && User::emailExists($old['email'])) {
            $errors[] = 'Un compte existe d√©j√† avec cette adresse email.';
        }

        return $errors;
    }

    /**
     * V√©rifie si le mot de passe est fort
     */
    private function isPasswordStrong(string $password): bool
    {
        return strlen($password) >= 12
            && preg_match('/[A-Z]/', $password)
            && preg_match('/[a-z]/', $password)
            && preg_match('/\d/', $password)
            && preg_match('/[^A-Za-z0-9]/', $password);
    }

    /**
     * Construit l'URL d'activation
     */
    private function buildActivationUrl(string $token): string
    {
        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'https' : 'http';
        $host = $_SERVER['HTTP_HOST'];
        return $protocol . '://' . $host . '/activate?token=' . urlencode($token);
    }

    /**
     * ‚úÖ AJOUT : V√©rifie si l'utilisateur est rate-limit√©
     */
    private function isRateLimited(): bool
    {
        $maxAttempts = 5;
        $windowSeconds = 900; // 15 minutes
        $now = time();

        $attempts = $_SESSION['login_attempts'] ?? [];
        $attempts = array_filter($attempts, fn($ts) => ($now - $ts) <= $windowSeconds);
        $_SESSION['login_attempts'] = $attempts;

        return count($attempts) >= $maxAttempts;
    }

    /**
     * ‚úÖ AJOUT : Enregistre une tentative √©chou√©e
     */
    private function recordFailedAttempt(): void
    {
        $_SESSION['login_attempts'][] = time();
    }

    /**
     * ‚úÖ AJOUT : Connecte l'utilisateur et redirige
     */
    private function loginUser(array $medecin): void
    {
        if (headers_sent()) {
            die('Erreur: headers d√©j√† envoy√©s');
        }

        session_regenerate_id(true);

        $_SESSION['user'] = [
            'id'         => (int)$medecin['med_id'],
            'email'      => $medecin['email'],
            'prenom'     => $medecin['prenom'],
            'nom'        => $medecin['nom'],
            'name'       => trim($medecin['prenom'] . ' ' . $medecin['nom']),
            'sexe'       => $medecin['sexe'],
            'specialite' => $medecin['specialite']
        ];

        unset($_SESSION['login_attempts']); // ‚úÖ R√©initialise les tentatives

        header('Location: /accueil');
        exit;
    }
}